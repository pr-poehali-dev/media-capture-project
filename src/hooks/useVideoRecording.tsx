import { useRef, useState } from 'react';

export const useVideoRecording = () => {
  const [isRecording, setIsRecording] = useState(false);
  const [recordedVideo, setRecordedVideo] = useState<string | null>(null);
  const [currentCamera, setCurrentCamera] = useState<'environment' | 'user'>('environment'); // 'environment' = —Ç—ã–ª–æ–≤–∞—è, 'user' = —Ñ—Ä–æ–Ω—Ç–∞–ª—å–Ω–∞—è
  const [availableCameras, setAvailableCameras] = useState<MediaDeviceInfo[]>([]);
  const [isPreviewActive, setIsPreviewActive] = useState(false);
  const videoRef = useRef<HTMLVideoElement>(null);
  const mediaRecorderRef = useRef<MediaRecorder | null>(null);
  const streamRef = useRef<MediaStream | null>(null);

  // –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∫–∞–º–µ—Ä
  const getAvailableCameras = async () => {
    try {
      const devices = await navigator.mediaDevices.enumerateDevices();
      const cameras = devices.filter(device => device.kind === 'videoinput');
      setAvailableCameras(cameras);
      console.log('üìπ –ù–∞–π–¥–µ–Ω–æ –∫–∞–º–µ—Ä:', cameras.length);
      return cameras;
    } catch (error) {
      console.error('‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –∫–∞–º–µ—Ä:', error);
      return [];
    }
  };

  // –ó–∞–ø—É—Å–∫ –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∫–∞–º–µ—Ä—ã
  const startCameraPreview = async (facingMode: 'environment' | 'user' = currentCamera) => {
    try {
      console.log(`üìπ –ó–∞–ø—É—Å–∫–∞–µ–º –∫–∞–º–µ—Ä—É: ${facingMode === 'environment' ? '—Ç—ã–ª–æ–≤–∞—è' : '—Ñ—Ä–æ–Ω—Ç–∞–ª—å–Ω–∞—è'}`);
      
      // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–µ–∫—É—â–∏–π –ø–æ—Ç–æ–∫ –µ—Å–ª–∏ –µ—Å—Ç—å
      if (streamRef.current) {
        streamRef.current.getTracks().forEach(track => track.stop());
      }
      
      const constraints = {
        video: { facingMode },
        audio: true
      };

      const stream = await navigator.mediaDevices.getUserMedia(constraints);
      streamRef.current = stream;
      setCurrentCamera(facingMode);
      setIsPreviewActive(true);
      
      if (videoRef.current) {
        videoRef.current.srcObject = stream;
        videoRef.current.muted = true;
        videoRef.current.playsInline = true;
        
        try {
          await videoRef.current.play();
          console.log('‚ñ∂Ô∏è –ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä –∑–∞–ø—É—â–µ–Ω');
        } catch (playError) {
          console.warn('‚ö†Ô∏è –ê–≤—Ç–æ–≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ:', playError);
        }
      }
      
      return stream;
    } catch (error) {
      console.error('‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –∫–∞–º–µ—Ä—ã:', error);
      setIsPreviewActive(false);
      throw error;
    }
  };

  // –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –∫–∞–º–µ—Ä—ã
  const switchCamera = async () => {
    if (isRecording) {
      console.warn('‚ö†Ô∏è –ù–µ–ª—å–∑—è –ø–µ—Ä–µ–∫–ª—é—á–∞—Ç—å –∫–∞–º–µ—Ä—É –≤–æ –≤—Ä–µ–º—è –∑–∞–ø–∏—Å–∏');
      return;
    }
    
    console.log('üîÑ –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º –∫–∞–º–µ—Ä—É...');
    const newCamera = currentCamera === 'environment' ? 'user' : 'environment';
    
    try {
      await startCameraPreview(newCamera);
      console.log(`‚úÖ –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–æ –Ω–∞ ${newCamera === 'environment' ? '—Ç—ã–ª–æ–≤—É—é' : '—Ñ—Ä–æ–Ω—Ç–∞–ª—å–Ω—É—é'} –∫–∞–º–µ—Ä—É`);
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –∫–∞–º–µ—Ä—ã:', error);
      // –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –ø—Ä–µ–¥—ã–¥—É—â–µ–π –∫–∞–º–µ—Ä–µ
      try {
        await startCameraPreview(currentCamera);
      } catch (fallbackError) {
        console.error('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –≤–µ—Ä–Ω—É—Ç—å—Å—è –∫ –ø—Ä–µ–¥—ã–¥—É—â–µ–π –∫–∞–º–µ—Ä–µ:', fallbackError);
      }
    }
  };

  const startVideoRecording = async () => {
    try {
      console.log('üöÄ –ù–∞—á–∏–Ω–∞–µ–º –∑–∞–ø–∏—Å—å –≤–∏–¥–µ–æ...');
      
      // –ï—Å–ª–∏ –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä –Ω–µ –∞–∫—Ç–∏–≤–µ–Ω, –∑–∞–ø—É—Å–∫–∞–µ–º –∫–∞–º–µ—Ä—É
      let stream = streamRef.current;
      if (!stream || !isPreviewActive) {
        stream = await startCameraPreview();
      }

      // –ü—Ä–æ—Å—Ç–µ–π—à–∏–π MediaRecorder –±–µ–∑ —Å–ª–æ–∂–Ω—ã—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫
      console.log('üî¥ –°–æ–∑–¥–∞–µ–º MediaRecorder...');
      const mediaRecorder = new MediaRecorder(stream);
      mediaRecorderRef.current = mediaRecorder;
      
      const chunks: BlobPart[] = [];
      
      mediaRecorder.ondataavailable = (event) => {
        console.log('üì¶ –ü–æ–ª—É—á–µ–Ω —á–∞–Ω–∫ –¥–∞–Ω–Ω—ã—Ö:', event.data.size, '–±–∞–π—Ç');
        if (event.data.size > 0) {
          chunks.push(event.data);
        }
      };

      mediaRecorder.onstop = () => {
        console.log('üõë –ó–∞–ø–∏—Å—å –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞, –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ...');
        const blob = new Blob(chunks, { type: 'video/webm' });
        const url = URL.createObjectURL(blob);
        console.log('‚úÖ –í–∏–¥–µ–æ –≥–æ—Ç–æ–≤–æ:', url);
        setRecordedVideo(url);
      };

      mediaRecorder.onerror = (event) => {
        console.error('‚ùå –û—à–∏–±–∫–∞ MediaRecorder:', event);
      };

      console.log('üé¨ –ù–∞—á–∏–Ω–∞–µ–º –∑–∞–ø–∏—Å—å...');
      mediaRecorder.start();
      setIsRecording(true);
      console.log('‚úÖ –ó–∞–ø–∏—Å—å –Ω–∞—á–∞–ª–∞—Å—å!');
      
    } catch (error) {
      console.error('üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error);
      
      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —á—Ç–æ –∏–º–µ–Ω–Ω–æ –ø—Ä–æ–∏–∑–æ—à–ª–æ
      if (error instanceof Error) {
        console.log('–¢–∏–ø –æ—à–∏–±–∫–∏:', error.name);
        console.log('–°–æ–æ–±—â–µ–Ω–∏–µ:', error.message);
        
        if (error.name === 'NotAllowedError') {
          alert('‚ùå –î–æ—Å—Ç—É–ø –∫ –∫–∞–º–µ—Ä–µ –∑–∞–ø—Ä–µ—â–µ–Ω.\n\nüì± –†–∞–∑—Ä–µ—à–∏—Ç–µ –¥–æ—Å—Ç—É–ø –∫ –∫–∞–º–µ—Ä–µ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö –±—Ä–∞—É–∑–µ—Ä–∞ –∏ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç–µ —Å—Ç—Ä–∞–Ω–∏—Ü—É.');
        } else if (error.name === 'NotFoundError') {
          alert('‚ùå –ö–∞–º–µ—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.\n\nüì± –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫–∞–º–µ—Ä—ã.');
        } else if (error.name === 'NotSupportedError') {
          alert('‚ùå –í–∞—à –±—Ä–∞—É–∑–µ—Ä –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –∑–∞–ø–∏—Å—å –≤–∏–¥–µ–æ.\n\nüîÑ –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –æ–±–Ω–æ–≤–∏—Ç—å –±—Ä–∞—É–∑–µ—Ä –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –¥—Ä—É–≥–æ–π.');
        } else {
          alert(`‚ùå –û—à–∏–±–∫–∞ –∫–∞–º–µ—Ä—ã: ${error.message}\n\nüîÑ –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É.`);
        }
      } else {
        alert('‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ—Å—Ç—É–ø–µ –∫ –∫–∞–º–µ—Ä–µ.\n\nüîÑ –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç–µ —Å—Ç—Ä–∞–Ω–∏—Ü—É –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.');
      }
    }
  };

  const stopVideoRecording = () => {
    console.log('üõë –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–∞–ø–∏—Å—å...');
    
    if (mediaRecorderRef.current && isRecording) {
      try {
        if (mediaRecorderRef.current.state === 'recording') {
          mediaRecorderRef.current.stop();
          console.log('‚úÖ MediaRecorder –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω');
        }
        setIsRecording(false);
      } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –∑–∞–ø–∏—Å–∏:', error);
        setIsRecording(false);
      }
    }
  };

  const downloadVideo = async () => {
    if (!recordedVideo) return;

    try {
      const response = await fetch(recordedVideo);
      const blob = await response.blob();
      
      const filename = `imperia_video_${new Date().getTime()}.webm`;
      
      // –î–ª—è –º–æ–±–∏–ª—å–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤ –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–æ—Å—Ç–æ–µ —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ
      const a = document.createElement('a');
      a.href = URL.createObjectURL(blob);
      a.download = filename;
      a.style.display = 'none';
      
      document.body.appendChild(a);
      a.click();
      document.body.removeChild(a);
      
      setTimeout(() => {
        URL.revokeObjectURL(a.href);
      }, 100);
      
      alert('‚úÖ –í–∏–¥–µ–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤ –∑–∞–≥—Ä—É–∑–∫–∏!');
      
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤–∏–¥–µ–æ:', error);
      alert('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤–∏–¥–µ–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.');
    }
  };

  const resetRecording = () => {
    console.log('üîÑ –°–±—Ä–æ—Å –∑–∞–ø–∏—Å–∏...');
    
    setRecordedVideo(null);
    setIsRecording(false);
    setIsPreviewActive(false);
    
    if (mediaRecorderRef.current) {
      try {
        if (mediaRecorderRef.current.state !== 'inactive') {
          mediaRecorderRef.current.stop();
        }
      } catch (e) {
        console.warn('‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ MediaRecorder:', e);
      }
      mediaRecorderRef.current = null;
    }
    
    if (streamRef.current) {
      streamRef.current.getTracks().forEach(track => {
        try {
          track.stop();
          console.log('üîá –¢—Ä–µ–∫ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω:', track.kind);
        } catch (e) {
          console.warn('‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ —Ç—Ä–µ–∫–∞:', e);
        }
      });
      streamRef.current = null;
    }
    
    if (videoRef.current) {
      videoRef.current.srcObject = null;
      console.log('üì∫ –í–∏–¥–µ–æ —ç–ª–µ–º–µ–Ω—Ç –æ—á–∏—â–µ–Ω');
    }
    
    console.log('‚úÖ –°–±—Ä–æ—Å –∑–∞–≤–µ—Ä—à–µ–Ω');
  };

  const stopPreview = () => {
    console.log('üõë –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä...');
    
    if (streamRef.current && !isRecording) {
      streamRef.current.getTracks().forEach(track => track.stop());
      streamRef.current = null;
      setIsPreviewActive(false);
      
      if (videoRef.current) {
        videoRef.current.srcObject = null;
      }
      
      console.log('‚úÖ –ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω');
    }
  };

  return {
    isRecording,
    recordedVideo,
    videoRef,
    currentCamera,
    availableCameras,
    isPreviewActive,
    startVideoRecording,
    stopVideoRecording,
    downloadVideo,
    resetRecording,
    switchCamera,
    startCameraPreview,
    stopPreview,
    getAvailableCameras
  };
};